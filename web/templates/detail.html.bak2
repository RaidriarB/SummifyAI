<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>SummifyAI - 转写详情</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/static/style.css">
  引入 marked
  <!-- <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script> -->
  <!-- 引入 mermaid -->
  <!-- <script src="https://cdn.jsdelivr.net/npm/mermaid@11.5.0/dist/mermaid.min.js"></script> -->

 <script src="https://cdn.jsdelivr.net/npm/marked/lib/marked.umd.js"></script>
<script src="https://cdn.jsdelivr.net/npm/marked-mermaid/lib/index.umd.js"></script>
  <script>
    // 关闭 mermaid 的自动初始化，待内容渲染完后再手动调用
    //mermaid.initialize({ startOnLoad: false });
    
    const options={
      gfm: true,
      breaks: true,
      pedantic: false,
      smartLists: true,
      smartypants: false,
      xhtml: false
    };
  </script>
  <style>
    :root {
      --primary-color: #0d6efd;
      --success-color: #198754;
      --danger-color: #dc3545;
      --info-color: #0dcaf0;
      --border-color: #dee2e6;
      --shadow-color: rgba(0, 0, 0, 0.1);
    }
    .navbar-brand {
      font-weight: bold;
    }
    .section-title {
      margin: 30px 0 20px;
      color: #333;
      font-weight: 600;
    }
    .file-list {
      margin-top: 20px;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      background-color: #f8f9fa;
      padding: 15px;
      overflow-x: hidden;
      box-shadow: 0 2px 4px var(--shadow-color);
    }
    @media (max-width: 768px) {
      .file-list {
        padding: 10px;
      }
      .list-group-item {
        padding: 10px;
        flex-wrap: wrap;
      }
      .list-group-item .btn-group {
        display: flex;
        flex-direction: row;
        gap: 5px;
        margin-top: 10px;
        width: 100%;
        justify-content: flex-start;
      }
      .list-group-item .btn-group .btn {
        flex: 1;
        margin: 0 !important;
        min-width: auto;
        padding: 8px 16px;
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.2s ease-in-out;
      }
      .list-group-item .btn-group .btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px var(--shadow-color);
      }
      .file-name {
        word-break: break-all;
        width: 100%;
        margin-right: 0;
      }
      .section-title {
        font-size: 1.5rem;
        margin: 20px 0;
      }
    }
    .file-list .list-group {
      max-height: 40vh;
      overflow-y: auto;
    }
    .preview-area {
      height: 50vh;
      overflow-y: auto;
      padding: 1.5rem;
      border: 1px solid var(--border-color);
      border-radius: 8px;
      margin-top: 20px;
      box-shadow: 0 2px 4px var(--shadow-color);
      background-color: #fff;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container">
      <a class="navbar-brand" href="/">SummifyAI</a>
    </div>
  </nav>

  <div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center">
      <h2 class="section-title mb-0">{{ filename }} 的转写结果</h2>
      <a href="/" class="btn btn-outline-primary">返回文件列表</a>
    </div>

    <div class="file-list">
      <h4>文件列表</h4>
      <div class="list-group">
        {% for file in files %}
        <div class="list-group-item d-flex justify-content-between align-items-center">
          <span class="file-name" data-file="{{ file.name }}">{{ file.name }}</span>
          <div class="btn-group">
            <button class="btn btn-sm btn-primary view-btn" data-file="{{ file.name }}" style="white-space: nowrap; min-width: 60px;">查看</button>
            <a href="/download_file/{{ filename.split('.')[0] }}/{{ file.name }}" class="btn btn-sm btn-success" style="white-space: nowrap; min-width: 60px;">下载</a>
            <button class="btn btn-sm btn-danger delete-btn" data-file="{{ file.name }}" style="white-space: nowrap; min-width: 60px;">删除</button>
          </div>
        </div>
        {% endfor %}
      </div>
    </div>

    <div class="preview-area markdown-body" id="markdown-preview">
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // 自定义 marked 渲染器，参考 Mermaid 官方文档示例
      const renderer = new marked.Renderer();
      // renderer.code = function(code, language) {
      //   // 确保 code 为字符串，防止类型错误
      //   language = code.lang
      //   const codeStr = code.text
      //   // 如果语言为 mermaid 或代码内容以 sequenceDiagram/graph 开头，则生成 Mermaid 图表容器
      //   if ((language && language.toLowerCase() === 'mermaid') || codeStr.match(/^(sequenceDiagram|graph|mindmap)/)) {
      //     return `<div class="mermaid">${codeStr}</div>`;
      //   } else {
      //     return `<pre><code>${codeStr}</code></pre>`;
      //   }
      // };

      // renderer.code = function (code) {
      //   if (code.lang == 'mermaid') return `<pre class="mermaid">${code.text}</pre>`;
      //   return `<pre>${code.text}</pre>`;
      //   };
        marked.use(markedMermaid(options));
        //marked.use(renderer)

      // 点击“查看”按钮加载并渲染 Markdown 文件内容
      document.querySelectorAll('.view-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          const fileName = this.dataset.file;
          const folderName = '{{ filename }}'.split('.')[0];
          fetch(`/view_file/${folderName}/${fileName}`)
            .then(response => response.text())
            .then(content => {
              const previewElement = document.getElementById('markdown-preview');
              if (previewElement) {
                // 使用自定义渲染器解析 Markdown 内容
                previewElement.innerHTML = marked.parse(content);
                // 手动初始化新生成的 Mermaid 图表
                //mermaid.init(undefined, previewElement.querySelectorAll('.mermaid'));
              } else {
                console.error('Preview element not found');
              }
            })
            .catch(error => {
              console.error('Error fetching file content:', error);
            });
        });
      });

      // 删除文件功能
      document.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          if (confirm('确定要删除这个文件吗？')) {
            const fileName = this.dataset.file;
            const folderName = '{{ filename }}'.split('.')[0];
            const url = `/delete_file_in_output/${folderName}/${fileName}`;
            fetch(url, { method: 'POST' })
              .then(response => response.json())
              .then(data => {
                if (data.status === 'success') {
                  this.closest('.list-group-item').remove();
                } else {
                  alert('删除失败: ' + data.message);
                }
              })
              .catch(error => {
                console.error('删除请求出错:', error);
                alert('删除请求出错');
              });
          }
        });
      });
    });
  </script>
</body>
</html>
